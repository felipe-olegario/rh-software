import { CypherEnvironment } from "../Environment";
import type { NodeProperties, NodeRef } from "../references/NodeRef";
import type { RelationshipProperties, RelationshipRef } from "../references/RelationshipRef";
import type { Variable } from "../references/Variable";
import type { CypherCompilable } from "../types";
declare const customInspectSymbol: unique symbol;
export declare abstract class PatternElement<T extends NodeRef | RelationshipRef> implements CypherCompilable {
    protected element: T;
    constructor(element: T);
    abstract getCypher(env: CypherEnvironment): string;
    /**
     * Returns the ordered variables of the Pattern
     * Note that even unnamed variables will be returned
     */
    abstract getVariables(): Variable[];
    protected serializeParameters(parameters: NodeProperties | RelationshipProperties, env: CypherEnvironment): string;
    /** Custom string for browsers and templating
     * @hidden
     */
    toString(): string;
    /** Custom log for console.log in Node
     * @hidden
     */
    [customInspectSymbol](): string;
}
export {};
