"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Pattern = void 0;
const label_expressions_1 = require("../expressions/labels/label-expressions");
const RelationshipRef_1 = require("../references/RelationshipRef");
const escape_1 = require("../utils/escape");
const PartialPattern_1 = require("./PartialPattern");
const PatternElement_1 = require("./PatternElement");
/** Represents a pattern of a single node or n-relationships to be used in clauses.
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/syntax/patterns/)
 * @group Patterns
 */
class Pattern extends PatternElement_1.PatternElement {
    constructor(node, previous) {
        super(node);
        this.withLabels = true;
        this.withVariable = true;
        this.previous = previous;
    }
    withoutLabels() {
        this.withLabels = false;
        return this;
    }
    withoutVariable() {
        this.withVariable = false;
        return this;
    }
    withProperties(properties) {
        this.properties = properties;
        return this;
    }
    related(rel) {
        if (!rel)
            rel = new RelationshipRef_1.RelationshipRef();
        return new PartialPattern_1.PartialPattern(rel, this);
    }
    getVariables() {
        const prevVars = this.previous?.getVariables() ?? [];
        prevVars.push(this.element);
        return prevVars;
    }
    /**
     * @internal
     */
    getCypher(env) {
        const prevStr = this.previous?.getCypher(env) ?? "";
        const nodeRefId = this.withVariable ? `${this.element.getCypher(env)}` : "";
        const propertiesStr = this.properties ? this.serializeParameters(this.properties, env) : "";
        const nodeLabelStr = this.withLabels ? this.getNodeLabelsString(this.element, env) : "";
        return `${prevStr}(${nodeRefId}${nodeLabelStr}${propertiesStr})`;
    }
    getNodeLabelsString(node, env) {
        const labels = node.labels;
        if (labels instanceof label_expressions_1.LabelExpr) {
            const labelsStr = labels.getCypher(env);
            if (!labelsStr)
                return "";
            return `:${labels.getCypher(env)}`;
        }
        else {
            const escapedLabels = labels.map(escape_1.escapeLabel);
            if (escapedLabels.length === 0)
                return "";
            return `:${escapedLabels.join(":")}`;
        }
    }
}
exports.Pattern = Pattern;
