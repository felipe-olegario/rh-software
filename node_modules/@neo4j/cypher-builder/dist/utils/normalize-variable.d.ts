import { Literal } from "../references/Literal";
import type { Param } from "../references/Param";
import type { Variable } from "../references/Variable";
import { MapExpr } from "../expressions/map/MapExpr";
import type { Expr } from "../types";
type VariableInput = string | number | Variable | Literal | Param;
export type InputArgument<T extends string | number> = T | Variable | Literal<T> | Param<T>;
export declare function normalizeVariable(value: VariableInput): Variable | Literal | Param;
export declare function normalizeExpr(value: VariableInput | Expr): Variable | Literal | Param | Expr;
export declare function normalizeMap(map: Record<string, VariableInput>): MapExpr;
export {};
